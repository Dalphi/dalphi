= simple_form_for(interface) do |f|
  .row
    .form-inputs
      .col-xs-12.col-sm-12.col-lg-6
        = f.input :title

        / radio list of existing interface types and input for new type
        = f.input :interface_type,
                  collection: interface_types,
                  input_html: { class: 'c-select' }

        / token input of associated_problem_identifiers
        = f.input :associated_problem_identifiers,
                  as: :string,
                  input_html: { class: 'tokenized_problem_identifiers', 'data-autocomplete' => known_problem_identifiers }

      / input.tokenize type="text"
      .col-xs-12.col-lg-6
        = f.input :template,
                  input_html: { class: 'form-control code-input', rows: 8 }
      .col-xs-12.col-lg-6
        = f.input :java_script,
                  label: t('interfaces.form.attributes.javascript.label'),
                  input_html: { class: 'form-control code-input', rows: 8 }
      .col-xs-12.col-lg-6
        = f.input :stylesheet,
                  label: t('interfaces.form.attributes.stylesheet.label'),
                  input_html: { class: 'form-control code-input', rows: 8 }
  
      coffee:
        window.interfacesForm = new window.InterfacesForm()

  .row.btn-row
    .col-xs-12
      = render 'shared/button', type: 'back'
      = render 'shared/button',
               method: 'delete',
               confirm: t('delete-confirm'),
               type: 'danger',
               href: service_path(service),
               label: t('delete'),
               icon: 'times' if params[:action] == 'edit'
      = render 'shared/button',
               type: 'submit',
               label: t('save'),
               icon: 'check'
